import logging
import asyncio
import os
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "7899510124:AAEMHtZUNKKTw17iURSw6uuv94mWjJL3Ypw"
CHAT_ID = -1002741686305
THREAD_ID = 286
DATA_FILE = "loot_data.json"

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ====
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

loot_data = load_data()

# ==== –ö–Ω–æ–ø–∫–∏ ====
def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –í–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è", callback_data="input_time")],
        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="show_list")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ç–æ—Ä", callback_data="delete_sector")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å", callback_data="reset_data")],
        [InlineKeyboardButton("üìò –ü–æ–º–æ—â—å / –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")]
    ])

def get_sector_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(sector, callback_data=f"sector_{sector}")]
        for sector in loot_data.keys()
    ])

def format_loot_list():
    if not loot_data:
        return "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤."
    text = "üìã –°–ø–∏—Å–æ–∫ —è—â–∏–∫–æ–≤:\n"
    for s, t in loot_data.items():
        pickup = datetime.strptime(t, "%H:%M")
        r1 = (pickup + timedelta(minutes=45)).strftime("%H:%M")
        r2 = (pickup + timedelta(minutes=90)).strftime("%H:%M")
        text += f"üì¶ {s}: ‚è´ {t} ‚ûú ‚è≥ {r1} –¥–æ {r2}\n"
    return text

# ==== –•–µ–Ω–¥–ª–µ—Ä—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "input_time":
        await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–µ–∫—Ç–æ—Ä:", reply_markup=get_sector_menu())

    elif query.data.startswith("sector_"):
        sector = query.data.split("_")[1]
        context.user_data["awaiting_time"] = sector
        await query.message.reply_text(f"üïì –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–∫—Ç–æ—Ä–∞ {sector} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:00):")

    elif query.data == "show_list":
        await query.message.reply_text(format_loot_list(), reply_markup=get_main_menu())

    elif query.data == "delete_sector":
        if loot_data:
            context.user_data["deleting"] = True
            await query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–µ–∫—Ç–æ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_sector_menu())
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤.", reply_markup=get_main_menu())

    elif query.data == "reset_data":
        loot_data.clear()
        save_data(loot_data)
        await query.message.reply_text("‚ôªÔ∏è –í—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=get_main_menu())

    elif query.data == "help":
        help_text = (
            "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
            "‚Ä¢ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:25)\n"
            "‚Ä¢ –í –Ω–∞—á–∞–ª–µ –Ω–µ–¥–µ–ª–∏ –¥–æ–±–∞–≤—å —Å–µ–∫—Ç–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /loot H8 14:00\n"
            "‚Ä¢ –ó–∞—Ç–µ–º –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∏—Ö\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–°–±—Ä–æ—Å' —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–π –Ω–µ–¥–µ–ª–∏"
        )
        await query.message.reply_text(help_text, reply_markup=get_main_menu())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.message_thread_id != THREAD_ID:
        return

    if context.user_data.get("awaiting_time"):
        sector = context.user_data.pop("awaiting_time")
        try:
            time_str = update.message.text.strip()
            pickup = datetime.strptime(time_str, "%H:%M")
            loot_data[sector] = pickup.strftime("%H:%M")
            save_data(loot_data)
            r1 = (pickup + timedelta(minutes=45)).strftime("%H:%M")
            r2 = (pickup + timedelta(minutes=90)).strftime("%H:%M")
            await update.message.reply_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è {sector}!\n‚è´ {pickup.strftime('%H:%M')} ‚ûú ‚è≥ {r1} –¥–æ {r2}"
            )
        except:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM")

        await update.message.reply_text(format_loot_list(), reply_markup=get_main_menu())

    elif context.user_data.get("deleting"):
        context.user_data.pop("deleting")
        sector = update.message.text.strip().upper()
        if sector in loot_data:
            del loot_data[sector]
            save_data(loot_data)
            await update.message.reply_text(f"üóëÔ∏è –°–µ–∫—Ç–æ—Ä {sector} —É–¥–∞–ª—ë–Ω.")
        else:
            await update.message.reply_text(f"‚ùå –°–µ–∫—Ç–æ—Ä {sector} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text(format_loot_list(), reply_markup=get_main_menu())

    elif update.message.text.startswith("/loot"):
        try:
            _, sector, time_str = update.message.text.strip().split()
            pickup = datetime.strptime(time_str, "%H:%M")
            loot_data[sector.upper()] = pickup.strftime("%H:%M")
            save_data(loot_data)
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–µ–∫—Ç–æ—Ä {sector.upper()} —Å –≤—Ä–µ–º–µ–Ω–µ–º {time_str}")
        except:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /loot H8 14:00")

# ==== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ====
async def reminder_loop(app):
    while True:
        now = datetime.now().strftime("%H:%M")
        for s, t in loot_data.items():
            if now == (datetime.strptime(t, "%H:%M") + timedelta(minutes=35)).strftime("%H:%M"):
                r1 = (datetime.strptime(t, "%H:%M") + timedelta(minutes=45)).strftime("%H:%M")
                r2 = (datetime.strptime(t, "%H:%M") + timedelta(minutes=90)).strftime("%H:%M")
                await app.bot.send_message(
                    chat_id=CHAT_ID,
                    message_thread_id=THREAD_ID,
                    text=f"‚ö° –°–∫–æ—Ä–æ —Ä–µ—Å–ø –≤ —Å–µ–∫—Ç–æ—Ä–µ {s}!\n‚è∞ –í—Ä–µ–º—è: —Å {r1} –¥–æ {r2}"
                )
        await asyncio.sleep(60)

# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("loot", handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    asyncio.create_task(reminder_loop(app))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# –î–ª—è Replit –±–µ–∑ run_until_complete
import nest_asyncio
nest_asyncio.apply()
asyncio.get_event_loop().run_until_complete(main())




















































