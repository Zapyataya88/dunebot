import logging
import asyncio
import os
import json
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"
CHAT_ID = -100xxxxxxxxxx
THREAD_ID = 123
DATA_FILE = "loot_data.json"

# ==== –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ====
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

loot_data = load_data()

# ==== –ö–æ–º–∞–Ω–¥—ã ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(sector, callback_data=sector)] for sector in loot_data.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    await update.message.reply_text(
        "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\nüïê –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `/lut G3 13:00`\nüîò –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loot_data.clear()
    save_data(loot_data)
    await update.message.reply_text("‚úÖ –í—Å–µ —Å–µ–∫—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã.")

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.startswith("/lut"):
        parts = update.message.text.split()
        if len(parts) == 3:
            sector, time_str = parts[1], parts[2]
            try:
                r1 = datetime.strptime(time_str, "%H:%M")
                r2 = r1 + timedelta(minutes=90)
                loot_data[sector] = r1.strftime("%H:%M")
                save_data(loot_data)
                await update.message.reply_text(f"üìç –°–µ–∫—Ç–æ—Ä {sector} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {r1.strftime('%H:%M')} - {r2.strftime('%H:%M')}")
            except:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: `/lut G3 13:00`", parse_mode="Markdown")
        else:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `/lut <—Å–µ–∫—Ç–æ—Ä> <–≤—Ä–µ–º—è>`", parse_mode="Markdown")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sector = query.data
    if sector in loot_data:
        try:
            r1 = datetime.strptime(loot_data[sector], "%H:%M")
            r2 = r1 + timedelta(minutes=90)
            await context.bot.send_message(
                chat_id=CHAT_ID,
                message_thread_id=THREAD_ID,
                text=f"‚ö†Ô∏è‚ö° –°–∫–æ—Ä–æ —Ä–µ—Å–ø –≤ —Å–µ–∫—Ç–æ—Ä–µ {sector}!\nüïí –í—Ä–µ–º—è: —Å {r1.strftime('%H:%M')} –¥–æ {r2.strftime('%H:%M')}"
            )
        except Exception as e:
            await query.edit_message_text(f"‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
    else:
        await query.edit_message_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤.")

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ====
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^/lut"), handle_input))
    app.add_handler(CallbackQueryHandler(button_handler))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())























































